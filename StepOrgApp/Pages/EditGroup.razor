@page "/editgroup/{currentGroup}"
@using System.Net.Http.Headers
@using Plugin.Media
@using Plugin.Media.Abstractions
@inject IFileReaderService _fileReaderService
@inject GroupServiceRequest _groupService
@inject NavigationManager _navigationManager

<h3>EditGroup</h3>
<EditForm Model="editGroup" OnValidSubmit="EditName">
    <DataAnnotationsValidator />
    <div class="container-fluid">
        <h3 class="mt-1">AddGroup</h3>

        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Short Name</label>
            <InputText @bind-Value="editGroup.ShortName" type="name" class="form-control" id="exampleFormControlInput1" placeholder="Short Name" />
            <ValidationMessage For="(()=>editGroup.ShortName)"></ValidationMessage>
        </div>
        <div class="mb-3">
            <label for="exampleFormControlInput1" class="form-label">Name</label>
            <InputText @bind-Value="editGroup.Name" type="name" class="form-control" id="exampleFormControlInput1" placeholder="Name" />
            <ValidationMessage For="(()=>editGroup.Name)"></ValidationMessage>
        </div>
        <div class="py-2">
            <button type="submit" class="btn btn-success btn-block"><i class="bi bi-person-bounding-box"></i> Change Name</button>
        </div>
    </div>
</EditForm>
@*<input type="file" @ref="_input" @onchange="HandleSelected" accept=".jpg, .jpeg, png" />*@
<div class="mb-3">
    <label for="formFile" class="form-label">Default file input example</label>
    <input @onchange="UoloadImage" class="form-control" type="file" id="formFile">
</div>

    



@code {
    [Parameter]
    public string currentGroup { get; set; }

    CreateGroup editGroup = new();
    GroupDto currentGroupDto = new();

    private async void UoloadImage()
    {
        await CrossMedia.Current.Initialize();

        if (!CrossMedia.Current.IsPickPhotoSupported)
        {
            await App.Current.MainPage.DisplayAlert("No PickPhoto", ":( No PickPhoto available.", "OK");
            return;
        }

        var _mediaFile = await MediaPicker.Default.PickPhotoAsync();
        
        if (_mediaFile != null)
        {
            var newFile = Path.Combine(FileSystem.CacheDirectory, _mediaFile.FileName);

                var content = new MultipartFormDataContent();

                content.Add(new StreamContent(await _mediaFile.OpenReadAsync()),
                    "\"file\"",
                    $"\"{newFile}\"");

                await _groupService.UploadProductImage(content, currentGroup);
        }
        _navigationManager.NavigateTo("/");
    }

    

    public async void EditName()
    {
        await _groupService.ChangeGroupName(editGroup, currentGroup);
        StateHasChanged();
        _navigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        currentGroupDto = await _groupService.GetGroupById(currentGroup);
        if (currentGroupDto != null)
        {
            editGroup.ShortName = currentGroupDto.ShortName;
            editGroup.Name = currentGroupDto.GroupName;
        }
        
    }
}
